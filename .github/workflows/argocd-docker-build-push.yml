name: Build argocd-workertools image

on:
  push:
    branches:
    - main
    paths:
    - argocd/**
  schedule:
    - cron: '0 3 * * *'
  workflow_dispatch:
    inputs:
      force_run:
        description: 'Force the build to run'
        required: false
        default: false
        type: boolean

env:
   REGISTRY_IMAGE_BASE: octopuslabs/workertools
   REGISTRY_IMAGE: octopuslabs/argocd-workertools

jobs:

  get-version-number:
    runs-on: windows-latest
    outputs:
      CONTINUE: ${{ steps.check-version.outputs.CONTINUE }}
      VERSION: ${{ steps.check-version.outputs.VERSION }}
      KUBECTL_MAJOR_MINOR_VERSION: ${{ steps.check-version.outputs.KUBECTL_MAJOR_MINOR_VERSION }}
    steps:
    - uses: actions/checkout@v4
    - id: check-version
      name: Compare latest version with container
      run: |
        $forceRun = "${{ github.event.inputs.force_run }}" -eq "true"
        Write-Output "Getting argocd cli version"
        $chocoInformationRaw = choco info argocd-cli  --limitoutput
        $versionOutput = ($chocoInformationRaw.Split("|"))[1]

        [System.Version]$version = $null
        $versionParsed = [System.Version]::TryParse($versionOutput, [ref]$version)
        if(-not $versionParsed) {
            Write-Host "Unable to parse '$versionOutput' as a valid version. Won't continue"
            echo "CONTINUE=No" >> $env:GITHUB_OUTPUT
        }
        else {
            $versionToCompare = "$($version.Major).$($version.Minor).$($version.Build)"
            Write-Host "Parsed version as $versionToCompare"
            
            $workerToolsTags = Invoke-RestMethod "https://registry.hub.docker.com/v2/repositories/${{ env.REGISTRY_IMAGE }}/tags?page_size=50"
            $matchingTag = $workerToolsTags.results | Where-Object { $_.name -eq $versionToCompare }

            echo "VERSION=$versionToCompare" >> $env:GITHUB_OUTPUT

            $isUpgradeNeeded = $null -eq $matchingTag

            if ($forceRun -or $isUpgradeNeeded)
            {
                if ($forceRun) {
                    Write-Host "Manual trigger is set. Forcing a build."
                }
                Write-Host "We need to upgrade the container to $versionToCompare"

                Write-Output "Getting kubectl version"
                $chocoInformationRaw = choco info kubernetes-cli --limitoutput
                $versionOutput = ($chocoInformationRaw.Split("|"))[1]

                [System.Version]$version = $null
                $versionParsed = [System.Version]::TryParse($versionOutput, [ref]$version)
                if(-not $versionParsed) {
                    Write-Host "Unable to parse kubectl '$versionOutput' as a valid version. Won't continue"
                    echo "CONTINUE=No" >> $env:GITHUB_OUTPUT
                }
                else {
                    $versionToCompare = "$($version.Major).$($version.Minor).$($version.Build)"
                    Write-Host "Parsed version as $versionToCompare"
                    # Major/minor version is used for linux dockerfile to install kubectl correctly
                    $majorMinorVersion = "$($version.Major).$($version.Minor)"
                    Write-Host "kubectl Major.Minor: $majorMinorVersion"
                    
                    echo "KUBECTL_MAJOR_MINOR_VERSION=$majorMinorVersion" >> $env:GITHUB_OUTPUT
                    
                    Write-Host "We have everything we need, continuing."
                    echo "CONTINUE=Yes" >> $env:GITHUB_OUTPUT
                }
            }
            else
            {
                Write-Host "Docker container already has latest version"
                echo "CONTINUE=No" >> $env:GITHUB_OUTPUT
            }
        }
      shell: pwsh

  build-linux:
    needs: [get-version-number]
    if: ${{ needs.get-version-number.outputs.CONTINUE == 'Yes' }}
    strategy:
      matrix:
        os:
          - ubuntu-latest
        platform:
          - linux/amd64
          - linux/arm64
    runs-on: ${{ matrix.os }}
    env:
      KUBECTL_MAJOR_MINOR_VERSION: ${{ needs.get-version-number.outputs.KUBECTL_MAJOR_MINOR_VERSION }}
    steps:

    - name: Prepare
      run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
          echo "PLATFORM_ARCH=${platform//[linux\/]/}" >> $GITHUB_ENV

    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      with:
        platforms: linux/amd64,linux/arm64

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USER }}
        password: ${{ secrets.DOCKER_HUB_PAT }}

    - name: Build and push by digest
      id: build
      uses: docker/build-push-action@v5
      with:
        context: argocd/${{ env.PLATFORM_PAIR }}
        platforms: ${{ matrix.platform }}
        provenance: false
        build-args: |
          BASE_IMAGE=${{ env.REGISTRY_IMAGE_BASE }}
          KUBECTL_MAJOR_MINOR_VERSION=${{ env.KUBECTL_MAJOR_MINOR_VERSION }}
        outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true

    - name: Export digest
      run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

    - name: Upload digest
      uses: actions/upload-artifact@v4
      with:
        name: digests-${{ env.PLATFORM_PAIR }}
        path: /tmp/digests/*
        if-no-files-found: error
        retention-days: 1
  merge:
    needs: [get-version-number, build-linux]
    if: ${{ needs.get-version-number.outputs.CONTINUE == 'Yes' }}
    runs-on: ubuntu-latest
    env:
      VERSION_NUMBER: ${{ needs.get-version-number.outputs.VERSION }}
      KUBECTL_MAJOR_MINOR_VERSION: ${{ needs.get-version-number.outputs.KUBECTL_MAJOR_MINOR_VERSION }}
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            ${{ env.VERSION_NUMBER }}
            latest
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_PAT }}
      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)
      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}