name: Build nomad-workertools image

on:
  # push:
  #   branches: 
  #   - main
  #   paths:
  #   - nomad/**
  #   - .github/workflows/nomad-docker-build-push.yml
  # schedule:
  #   - cron: '0 10 * * *'
  workflow_dispatch:

env:
   REGISTRY_IMAGE_BASE: octopuslabs/workertools
   REGISTRY_IMAGE: octopuslabs/nomad-workertools

jobs:

  get-version-number:
    runs-on: ubuntu-latest
    outputs:
      CONTINUE: ${{ steps.check-version.outputs.CONTINUE }}
      VERSION: ${{ steps.check-version.outputs.VERSION }}
    steps:    
    - uses: actions/checkout@v4
    - id: check-version
      name: Compare latest version with container
      run: |
        Write-Output "Getting Nomad CLI version" 
        $nomadCliInfo = Invoke-RestMethod "https://registry.hub.docker.com/v2/repositories/hashicorp/nomad/tags?page=1"
        # We have to sort the images and remove tags like "1.8-ent" to get the latest semver version.
        $otherImages = $nomadCliInfo.results | Where-Object { $_.name -ine "latest" -and $_.name -notlike "*-ent*" } | Sort-Object -Property @{Expression={[System.Version]$_.name}} -Descending | Select-Object -First 5
        $latestTag = $nomadCliInfo.results | Where-Object { $_.name -ieq "latest" }
        
        if($null -eq $latestTag)  {
            throw "Couldnt find latest tag for the Nomad CLI version from DockerHub"
        }
        
        $latestTagImage = $latestTag.images | Where-Object {$_.os -ieq "linux" -and $_.architecture -ieq "amd64" -and $_.status -ieq "active"} | Select-Object -First 1
        if($null -eq $latestTagImage)  {
            throw "Couldnt find latest tag image for the Nomad CLI version for linux/amd64"
        }
        $latestDigest = $latestTagImage.digest
        Write-Output "Found latest digest: $latestDigest"

        $versionToCompare = ""
        foreach($result in $otherImages) {
            $matchingImageDigest = $result.images | Where-Object {$_.os -ieq "linux" -and $_.architecture -ieq "amd64" -and $_.status -ieq "active" -and $_.digest -ieq $latestDigest } | Select-Object -First 1
            if($null -eq $matchingImageDigest) {
                continue;
            }
            else {
                $version = $result.name
                Write-Output "Found version '$version' that matches digest: $latestDigest"
                $versionSplit = $version.Split(".")
                $versionToCompare = "$($versionSplit[0]).$($versionSplit[1]).$($versionSplit[2])"
                break;
            }
        }

        if ([string]::IsNullOrWhiteSpace($versionToCompare)) {
            throw "No version with digest $latestDigest found"
        }

        $workerToolsTags = Invoke-RestMethod "https://registry.hub.docker.com/v2/repositories/${{ env.REGISTRY_IMAGE }}/tags?page_size=50"
        $matchingTag = $workerToolsTags.results | Where-Object { $_.name -ieq $versionToCompare }

        if ($null -ne $matchingTag)
        {
            Write-Host "Docker container already has latest version"
            echo "CONTINUE=No" >> $env:GITHUB_OUTPUT
        }
        else
        {
            Write-Host "We need to upgrade the container to $versionToCompare"            
            Write-Host "We have everything we need, continuing."
            echo "VERSION=$versionToCompare" >> $env:GITHUB_OUTPUT
            echo "CONTINUE=Yes" >> $env:GITHUB_OUTPUT
        }
      shell: pwsh

  build-linux:
    needs: [get-version-number]
    if: ${{ needs.get-version-number.outputs.CONTINUE == 'Yes' }}
    strategy:
      matrix:
        os: 
          - ubuntu-latest
        platform:
          - linux/amd64
          - linux/arm64
    runs-on: ${{ matrix.os }}
    env:
      VERSION_NUMBER: ${{ needs.get-version-number.outputs.VERSION }}-0
    steps:

    - name: Prepare
      run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV 
          echo "PLATFORM_ARCH=${platform//[linux\/]/}" >> $GITHUB_ENV 

    - name: Checkout  
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      with:
        platforms: linux/amd64,linux/arm64

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GHCR
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USER }}
        password: ${{ secrets.DOCKER_HUB_PAT }}

    - name: Build and push by digest
      id: build  
      uses: docker/build-push-action@v5
      with:
        context: nomad/${{ env.PLATFORM_PAIR }}
        platforms: ${{ matrix.platform }}
        provenance: false
        build-args: |
          BASE_IMAGE=${{ env.REGISTRY_IMAGE_BASE }}
          NOMAD_VERSION=${{ env.VERSION_NUMBER }}
        outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true

    - name: Export digest
      run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"
                    
    - name: Upload digest
      uses: actions/upload-artifact@v4
      with:
        name: digests-${{ env.PLATFORM_PAIR }}
        path: /tmp/digests/*
        if-no-files-found: error
        retention-days: 1

  merge:
    needs: [get-version-number, build-linux]
    if: ${{ needs.get-version-number.outputs.CONTINUE == 'Yes' }}
    runs-on: ubuntu-latest
    env:
      VERSION_NUMBER: ${{ needs.get-version-number.outputs.VERSION }}
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            ${{ env.VERSION_NUMBER }}
            latest
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_PAT }}
      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)          
      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}