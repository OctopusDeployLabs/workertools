name: Build GHCR nomad-workertools image

permissions:
  packages: write

on:
  push:
    branches: 
    - main
    paths:
    - nomad/**
    - .github/workflows/nomad-ghcr-build-push.yml
  schedule:
    - cron: '0 10 * * *'
  workflow_dispatch:

env:
   REGISTRY_IMAGE_BASE: ghcr.io/octopusdeploylabs/workertools
   REGISTRY_IMAGE: ghcr.io/octopusdeploylabs/nomad-workertools

jobs:

  get-version-number:
    runs-on: ubuntu-latest
    outputs:
      CONTINUE: ${{ steps.check-version.outputs.CONTINUE }}
      VERSION: ${{ steps.check-version.outputs.VERSION }}
      NOMAD_MAJOR_MINOR_VERSION: ${{ steps.check-version.outputs.NOMAD_MAJOR_MINOR_VERSION }}
    steps:    
    - uses: actions/checkout@v4
    - id: check-version
      name: Compare latest version with container
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        Write-Output "Getting Nomad CLI version"
        $headers = @{
              Authorization = "Bearer $env:GITHUB_TOKEN"
              "Accept"      = "application/vnd.github+json"
              "User-Agent"  = "GitHubAction"
          } 
        $nomadLatestReleases = @(Invoke-RestMethod "https://api.github.com/repos/hashicorp/nomad/releases/latest" -Headers $headers)
        if ($null -eq $nomadLatestReleases -or $nomadLatestReleases.Count -eq 0) {
            throw "Couldnt find latest release for the Nomad CLI from GitHub"
        }

        $latestRelease = ($nomadLatestReleases | Select-Object -First 1)
        $latestVersion = $latestRelease.tag_name -Replace "v", ""

        [System.Version]$version = $null
        $versionParsed = [System.Version]::TryParse($latestVersion, [ref]$version)
        if (-not $versionParsed) {
            Write-Output "Unable to parse '$latestVersion' as a valid version. Won't continue"
            echo "CONTINUE=No" >> $env:GITHUB_OUTPUT
        }
        else {
            $versionToCompare = "$($version.Major).$($version.Minor).$($version.Build)"
            $majorMinorVersion = "$($version.Major).$($version.Minor)"
                    
            Write-Output "Parsed version as $versionToCompare"
            Write-Output "Nomad Major.Minor: $majorMinorVersion"
            $token = [System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes("${{ secrets.GITHUB_TOKEN }}"))

            $response = @(Invoke-RestMethod -Uri "https://ghcr.io/v2/${{ env.REGISTRY_IMAGE }}/tags/list" -FollowRelLink -Headers @{Authorization="Bearer $token"} -SkipHttpErrorCheck)
            $workerToolsTags = @($response.tags | ForEach-Object {$_})
            $matchingTag = $workerToolsTags | Where-Object { $_ -eq $versionToCompare }

            if ($null -ne $matchingTag -or ($null -ne $response.errors -and $response.errors[0].code -ne "NAME_UNKNOWN"))
            {
                Write-Output "Docker container already has the latest version of nomad"
                echo "CONTINUE=No" >> $env:GITHUB_OUTPUT
            }
            else {
                Write-Output "We need to create the nomad container for version $versionToCompare."
                Write-Output "We have everything we need, continuing."
                echo "VERSION=$versionToCompare" >> $env:GITHUB_OUTPUT
                echo "NOMAD_MAJOR_MINOR_VERSION=$majorMinorVersion" >> $env:GITHUB_OUTPUT
                echo "CONTINUE=Yes" >> $env:GITHUB_OUTPUT
            }
        }
      shell: pwsh

  build-nomad-enterprise:
    needs: [get-version-number]
    if: ${{ needs.get-version-number.outputs.CONTINUE == 'Yes' }}
    strategy:
      matrix:
        os: 
          - ubuntu-latest
        platform:
          - linux/amd64
          - linux/arm64
    runs-on: ${{ matrix.os }}
    env:
      VERSION_NUMBER: ${{ needs.get-version-number.outputs.VERSION }}+ent-1
    steps:

    - name: Prepare
      run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV 
          echo "PLATFORM_ARCH=${platform//[linux\/]/}" >> $GITHUB_ENV 

    - name: Checkout  
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      with:
        platforms: linux/amd64,linux/arm64

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GHCR
      uses: docker/login-action@v3
      with:
        registry: https://ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push by digest
      id: build  
      uses: docker/build-push-action@v5
      with:
        context: nomad/${{ env.PLATFORM_PAIR }}
        platforms: ${{ matrix.platform }}
        provenance: false
        build-args: |
          BASE_IMAGE=${{ env.REGISTRY_IMAGE_BASE }}
          NOMAD_PACKAGE=nomad-enterprise
          NOMAD_VERSION=${{ env.VERSION_NUMBER }}
        outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true

    - name: Export enterprise digest
      run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"
                    
    - name: Upload enterprise digest
      uses: actions/upload-artifact@v4
      with:
        name: enterprise-digest-${{ env.PLATFORM_PAIR }}
        path: /tmp/digests/*
        if-no-files-found: error
        retention-days: 1

  merge-nomad-enterprise:
    needs: [get-version-number, build-nomad-enterprise]
    if: ${{ needs.get-version-number.outputs.CONTINUE == 'Yes' }}
    runs-on: ubuntu-latest
    env:
      VERSION_NUMBER: ${{ needs.get-version-number.outputs.VERSION }}
      NOMAD_MAJOR_MINOR_VERSION: ${{ needs.get-version-number.outputs.NOMAD_MAJOR_MINOR_VERSION }}
    steps:
      - name: Download enterprise digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: enterprise-digest-*
          merge-multiple: true
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            ${{ env.NOMAD_MAJOR_MINOR_VERSION }}-ent
            ${{ env.VERSION_NUMBER }}-ent
            latest
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: https://ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Create enterprise manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)          
      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}
  build-nomad:
    needs: [get-version-number]
    if: ${{ needs.get-version-number.outputs.CONTINUE == 'Yes' }}
    strategy:
      matrix:
        os: 
          - ubuntu-latest
        platform:
          - linux/amd64
          - linux/arm64
    runs-on: ${{ matrix.os }}
    env:
      VERSION_NUMBER: ${{ needs.get-version-number.outputs.VERSION }}-1
    steps:

    - name: Prepare
      run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV 
          echo "PLATFORM_ARCH=${platform//[linux\/]/}" >> $GITHUB_ENV 

    - name: Checkout  
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      with:
        platforms: linux/amd64,linux/arm64

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GHCR
      uses: docker/login-action@v3
      with:
        registry: https://ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push by digest
      id: build  
      uses: docker/build-push-action@v5
      with:
        context: nomad/${{ env.PLATFORM_PAIR }}
        platforms: ${{ matrix.platform }}
        provenance: false
        build-args: |
          BASE_IMAGE=${{ env.REGISTRY_IMAGE_BASE }}
          NOMAD_PACKAGE=nomad
          NOMAD_VERSION=${{ env.VERSION_NUMBER }}
        outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true

    - name: Export digest
      run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"
                    
    - name: Upload digest
      uses: actions/upload-artifact@v4
      with:
        name: digest-${{ env.PLATFORM_PAIR }}
        path: /tmp/digests/*
        if-no-files-found: error
        retention-days: 1

  merge-nomad:
    needs: [get-version-number, build-nomad]
    if: ${{ needs.get-version-number.outputs.CONTINUE == 'Yes' }}
    runs-on: ubuntu-latest
    env:
      VERSION_NUMBER: ${{ needs.get-version-number.outputs.VERSION }}
      NOMAD_MAJOR_MINOR_VERSION: ${{ needs.get-version-number.outputs.NOMAD_MAJOR_MINOR_VERSION }}
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digest-*
          merge-multiple: true
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            ${{ env.NOMAD_MAJOR_MINOR_VERSION }}
            ${{ env.VERSION_NUMBER }}
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: https://ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)          
      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}          